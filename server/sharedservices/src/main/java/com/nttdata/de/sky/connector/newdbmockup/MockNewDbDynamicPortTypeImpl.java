/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.nttdata.de.sky.connector.newdbmockup;

import com.nttdata.de.ityx.sharedservices.utils.ContexDbConnector;
import com.nttdata.de.lib.logging.SkyLogger;
import com.nttdata.de.sky.connector.newdb.NewDBConnectorImpl;
import de.sky.integration.web.customerdataservice._1.*;

import java.io.*;
import java.sql.*;

/**
 * This class was generated by Apache CXF 2.4.3 2011-10-25T09:14:10.298+02:00
 * Generated source version: 2.4.3
 * <p/>
 * This implementation has been changed to build up a simple in-memory database
 * that can be used for unit tests.
 */

@javax.jws.WebService(serviceName = "CustomerDataService",
		portName = "CustomerDataServiceEndpoint",
		targetNamespace = "http://www.sky.de/integration/web/CustomerDataService/1.0",
		wsdlLocation = "CustomerDataService_mock.wsdl",
		endpointInterface = "de.sky.integration.web.customerdataservice._1.PortType")
public class MockNewDbDynamicPortTypeImpl implements PortType {

	//private Connection cnMemDb = null;

	public MockNewDbDynamicPortTypeImpl() {
		setupTestDatabase(null, null);
	}

	public MockNewDbDynamicPortTypeImpl(String setupScript, String dataScript) {
		setupTestDatabase(setupScript, dataScript);
	}

	/*public void cleanupDatabase(final String pCleanupScript) {
		SkyLogger.getMediatrixLogger().info("Cleanup database - dropping tables.");
		if (pCleanupScript != null) {
			File cleanupScriptFile = new File(pCleanupScript);
			if (cleanupScriptFile.exists()) {
				try {
					SkyLogger.getMediatrixLogger().debug("Using file: " + cleanupScriptFile.getAbsolutePath());
					executeSQLScript(new FileInputStream(cleanupScriptFile));
				} catch (FileNotFoundException e) {
					SkyLogger.getMediatrixLogger().debug("File " + cleanupScriptFile.getAbsolutePath() + " not found. Using packaged structure.", e);
					executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_drop.sql"));
				}
			}
		} else {
			executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_drop.sql"));
		}
	}
*/
	private void setupTestDatabase(String setupScript, String dataScript) {
		Connection cnMemDb = null;
		try {
			//cnMemDb = DriverManager.getConnection("jdbc:hsqldb:mem:.", "SA", "");
			cnMemDb = ContexDbConnector.getConnection();
		} catch (SQLException e1) {
			SkyLogger.getMediatrixLogger().error("Unable to establish memory database.", e1);
			return;
		}

		/*
		SkyLogger.getMediatrixLogger().info("Setup database - creating tables.");
		if (setupScript != null) {
			File setupScriptFile = new File(setupScript);
			if (setupScriptFile.exists()) {
				try {
					SkyLogger.getMediatrixLogger().debug("Using file: " + setupScriptFile.getAbsolutePath());
					executeSQLScript(new FileInputStream(setupScriptFile));
				} catch (FileNotFoundException e) {
					SkyLogger.getMediatrixLogger().debug("File " + setupScriptFile.getAbsolutePath() + " not found. Using packaged structure.", e);
					executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata.sql"));
				}
			}
		} else {
			executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata.sql"));
		}

		if (dataScript != null) {
			File file = new File(dataScript);
			if (file.exists()) {
				try {
					SkyLogger.getMediatrixLogger().debug("Using file: " + file.getAbsolutePath());
					executeSQLScript(new FileInputStream(file));
				} catch (FileNotFoundException e) {
					SkyLogger.getMediatrixLogger().warn("File " + file.getAbsolutePath() + " not found. Using packaged data.", e);
					executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_data.sql"));
				}
			}
		} else {
			executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_data.sql"));
		}
*/
		Statement st;
		try {
			st = cnMemDb.createStatement();
			ResultSet rs = st.executeQuery("SELECT CUSTOMER_ID FROM NEWDB_CUSTOMER");

			int customers = 0;
			while (rs.next()) {
				customers++;
			}
			SkyLogger.getMediatrixLogger().debug("MEMDB imported " + customers + " customers");
		} catch (SQLException e) {
			SkyLogger.getMediatrixLogger().error("Failed to query for customers.", e);
		} finally {
			try {
				ContexDbConnector.releaseConnection(cnMemDb);
			} catch (Exception e) {
				SkyLogger.getMediatrixLogger().error("Failed to releaseConnection", e);
			}
		}
	}

	/*
	 * Add data from stream
	 */
	private void executeSQLScript(InputStream inputStream) {
		BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
		Connection cnMemDb = null;
		String line;
		StringBuilder sb = new StringBuilder();
		try {
			Statement st = cnMemDb.createStatement();
			line = in.readLine();
			while (line != null) {
				line = line.trim();
				// Remarks are to discard!:
				if (!line.startsWith("REMARK")) {
					// Empty lines are ignored too:
					if (line.length() != 0) {
						sb.append(line);
					}
					// execute SQL commands one by one, so that SQL-script
					// doesn't grow too big!:
					if (line.endsWith(";")) {
						try {
							st.execute(sb.toString());
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							SkyLogger.getConnectorLogger().info("SQL being executed: " + sb.toString());
							e.printStackTrace();
						}
						// Create sb for next SQL command:
						sb = new StringBuilder();
					}
				}
				line = in.readLine();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// print erroneous SQL command to the console for easier debugging:
			SkyLogger.getConnectorLogger().info("SQL being executed: " + sb.toString());
			e.printStackTrace();
		} finally {
			try {
				if (cnMemDb != null) {
					ContexDbConnector.releaseConnection(cnMemDb);
				}
			} catch (Exception e) {
				SkyLogger.getMediatrixLogger().error("Failed to releaseConnection", e);
			}
		}

	}

	/*
	 * (non-Javadoc)
	 *
	 * @see de.sky.integration.web.customerdataservice._1_0.PortType#
	 * getDynamicCustomerData(de.sky.integration.web.customerdataservice._1.
	 * GetDynamicCustomerDataRequestType getDynamicCustomerDataRequest )*
	 */


	public GetDynamicCustomerDataResponseType getDynamicCustomerData(GetDynamicCustomerDataRequestType req) {
		SkyLogger.getMediatrixLogger().debug("Executing operation getDynamicCustomerData " + req);
		long startTime = System.currentTimeMillis();
		try {
			de.sky.integration.web.customerdataservice._1.GetDynamicCustomerDataResponseType _return = new GetDynamicCustomerDataResponseType();
			SkyLogger.getMediatrixLogger().debug(" query CustomerId " + req.getCustomerId());
			_return.setCustomerId(req.getCustomerId());
			_return.setCustomer(new CustomerType());
			Connection cnMemDb = null;
			try {
				cnMemDb = ContexDbConnector.getConnection();
				PreparedStatement gCustomer=cnMemDb.prepareStatement("SELECT ROW_ID, CUSTOMER_ID, MOBILE_NUMBER, EMAIL_ADDRESS, FIRST_NAME, LAST_NAME, TELEPHONE_NUMBER, STATUS, OPERATION_DATE FROM NEWDB_CUSTOMER WHERE CUSTOMER_ID=?");
				//Statement st = cnMemDb.createStatement();
				//ResultSet rs = st.executeQuery("SELECT ROW_ID, CUSTOMER_ID, MOBILE_NUMBER, EMAIL_ADDRESS, FIRST_NAME, LAST_NAME, TELEPHONE_NUMBER, STATUS, OPERATION_DATE FROM NEWDB_CUSTOMER WHERE CUSTOMER_ID='" + req.getCustomerId() + "'");
				gCustomer.setString(1, req.getCustomerId());
				ResultSet rs = gCustomer.executeQuery();
				SkyLogger.getMediatrixLogger().info("Execution 1 of getDynamicCustomerData: " + req.getCustomerId() + " took " + (System.currentTimeMillis() - startTime));

				final CustomerType customer = _return.getCustomer();
				if (rs.next()) {
					// customer.setContractContent(rs.getString("CONTRACT_CONTENT"));
					// customer.setCustomerCategory(rs.getString("CATEGORY"));
					customer.setCustomerId(rs.getString("CUSTOMER_ID"));
					SkyLogger.getMediatrixLogger().debug("set CustomerId " + rs.getString("CUSTOMER_ID"));
					customer.setEmailAddress(rs.getString("EMAIL_ADDRESS"));
					customer.setFirstName(rs.getString("FIRST_NAME"));
					customer.setLastName(rs.getString("LAST_NAME"));
					customer.setMobileNumber(rs.getString("MOBILE_NUMBER"));
					customer.setTelephoneNumber(rs.getString("TELEPHONE_NUMBER"));
					// _return.getCustomer().setEmailAddress(rs.getString("EMAIL_ADDRESS"));
					// _return.getCustomer().setFirstName(rs.getString("FIRST_NAME"));
					// _return.getCustomer().setLastName(rs.getString("LAST_NAME"));
					// _return.getCustomer().setMobileNumber(rs.getString("MOBILE_NUMBER"));
					// _return.getCustomer().setTelephoneNumber(rs.getString("TELEPHONE_NUMBER"));
					// TODO: Add dunning?
					// _return.getCustomer().getDunning().add(...);
					customer.setStamp(rs.getString("OPERATION_DATE"));

					//ServiceRequestType serviceRequestType = new ServiceRequestType();
					/*
					 * serviceRequestType.setContractChangeCategory(rs
					 * .getString("SR_CONTRACTCHANGECATEGORY"));
					 * serviceRequestType.setContractChangeDate(rs
					 * .getString("SR_CONTRACTCHANGEDATE"));
					 * 
					 * customer.getServiceRequest().add(serviceRequestType);
					 */
				}

				PreparedStatement gCampaign=cnMemDb.prepareStatement("SELECT CAMPAIGN_TYPE FROM NEWDB_CAMPAIGN_CONF CCF WHERE END_DATE > SYSDATE AND START_DATE < SYSDATE AND STATUS='AKTIV' AND EXISTS (SELECT CUSTOMER_ID FROM NEWDB_CAMPAIGN CA WHERE CA.CAMPAIGN_ID=CCF.CAMPAIGN_ID AND CA.CUSTOMER_ID=?) GROUP BY CAMPAIGN_TYPE ");
				gCampaign.setString(1, req.getCustomerId());

				rs = gCampaign.executeQuery();
				SkyLogger.getMediatrixLogger().info("Execution2 of getDynamicCustomerData: " + req.getCustomerId() + " took " + (System.currentTimeMillis() - startTime));

				while (rs.next()) {
					CampaignType campaignType = new CampaignType();
					campaignType.setCampaignType(rs.getString("CAMPAIGN_TYPE"));
					customer.getCampaign().add(campaignType);
				}

				String sql;
				String contractId = req.getContractId();
				boolean withContract = false;
				if (contractId != null && !"".equals(contractId)&& !"0".equals(contractId)) {
					PreparedStatement gContract=cnMemDb.prepareStatement("SELECT * FROM NEWDB_CONTRACT WHERE CUSTOMER_ID = ? AND CONTRACT_ID = ?");
					gContract.setString(1, req.getCustomerId());
					gContract.setString(2, req.getContractId());
					rs = gContract.executeQuery();
					withContract = true;
				} else {
					PreparedStatement gContract=cnMemDb.prepareStatement("SELECT * FROM NEWDB_CONTRACT WHERE CUSTOMER_ID = ?");
					gContract.setString(1, req.getCustomerId());
					rs = gContract.executeQuery();
				}
				SkyLogger.getMediatrixLogger().info("Execution3 of getDynamicCustomerData: " + req.getCustomerId() + " took " + (System.currentTimeMillis() - startTime));

				// Statement stAsset = cnMemDb.createStatement();

				/*
				 * TODO: Add logic to decide which contract to use if
				 * assumeContract is true This will always happen if no contract
				 * has been provided, but the customer has more than one
				 * contract.
				 */
				while (rs.next()) {
					ContractType ctrType = new ContractType();

					/*
					 * IF 3.2 does not return the following values
					 * ctrType.setAccountNumber(rs.getString("ACCOUNT_NUMBER"));
					 * ctrType
					 * .setBankAccountHolder(rs.getString("BANK_ACCOUNT_HOLDER"
					 * )); ctrType.setBankCode(rs.getString("BANK_CODE"));
					 * ctrType.setCity(rs.getString("CITY"));
					 * ctrType.setFlatNumber(rs.getString("FLATNUMBER"));
					 * ctrType.setFloor(rs.getString("FLOOR"));
					 * ctrType.setHouseNumber(rs.getString("HOUSE_NUMBER"));
					 * ctrType.setStaircase(rs.getString("STAIRCASE"));
					 * ctrType.setStreet(rs.getString("STREET"));
					 * ctrType.setZipCode(rs.getString("ZIPCODE"));
					 */
					ctrType.setAccountNumber(rs.getString("ACCOUNT_NUMBER"));
					ctrType.setBankAccountHolder(rs.getString("BANK_ACCOUNT_HOLDER"));
					ctrType.setBankCode(rs.getString("BANK_CODE"));
					ctrType.setCity(rs.getString("CITY"));
					// ctrType.setFlatNumber("");
					// ctrType.setFloor("");
					ctrType.setHouseNumber(rs.getString("HOUSE_NUMBER"));
					// ctrType.setStaircase("");
					ctrType.setStreet(rs.getString("STREET"));
					ctrType.setZipCode(rs.getString("ZIPCODE"));
					// ctrType.setContractDate(rs.getString("CONTRACTDATE"));
					ctrType.setContractId(rs.getString("CONTRACT_ID"));
					SkyLogger.getMediatrixLogger().debug(rs.getString("CONTRACT_ID"));
					/* *****************************************************************************
					 * ctrType.setEarmarkedCancellationDate(rs
					 * .getString("EARM_CANCELDATE"));
					 * ctrType.setPossibleCancellationDate(rs
					 * .getString("POSS_CANCELDATE"));
					 * ctrType.setPricelist(rs.getString("PRICELIST"));
					 * ctrType.setSubscriptionStartDate(rs
					 * .getString("SUBS_STARTDATE"));
					 * ctrType.setUnexpectedReturnContract(rs
					 * .getString("UNEXPECTEDRETURNCONTRACT"));
					 * ******************
					 * ****************************************
					 * ********************
					 */
					ctrType.setWMFlag(rs.getString("WM_FLG"));

					// Sets mandate data.
					MandateType mandate = new MandateType();
					mandate.setMandateRefId(rs.getString("MANDATE_REF_ID"));
					mandate.setMandateStatus(rs.getString("MANDATE_STATUS"));
					mandate.setCustomerIBAN(rs.getString("CUSTOMER_IBAN"));
					mandate.setCustomerBIC(rs.getString("CUSTOMER_BIC"));
					ctrType.setMandate(mandate);

					DunningType dt = new DunningType();
					dt.setDunningContractId(ctrType.getContractId());
					dt.setDunningLevel("0");
					customer.getDunning().add(dt);

					/*
					 * ResultSet rsAsset = stAsset.executeQuery(
					 * "SELECT * FROM NEWDB_ASSET WHERE CONTRACT_ID = '"
					 * +ctrType.getContractId()+"'");
					 * 
					 * while (rsAsset.next()) { AssetType asset = new
					 * AssetType();
					 * asset.setSMCSerialNumber(rsAsset.getString("SERIAL_NUMBER"
					 * )); asset.setCIPlusModuleSerialNum(rsAsset.getString(
					 * "CIPLUS_SERIAL"));
					 * asset.setCIPlusModuleType(rsAsset.getString
					 * ("CIPLUS_TYPE"));
					 * asset.setHardDiskSerialNum(rsAsset.getString
					 * ("HARDDISK_SERIAL"));
					 * asset.setHardDiskType(rsAsset.getString
					 * ("HARDDISK_TYPE"));
					 * asset.setReceiverSerialNum(rsAsset.getString
					 * ("RECEIVER_SERIAL"));
					 * asset.setReceiverType(rsAsset.getString
					 * ("RECEIVER_TYPE"));
					 * 
					 * ctrType.getAsset().add(asset); }
					 */
					if (withContract && ctrType.getContractId().equals(contractId))
						customer.getContract().add(ctrType);
				}

				rs.close();
				_return.setResult(ResultType.OK);
				_return.setRetCode("0");
			} catch (SQLException e) {
				SkyLogger.getMediatrixLogger().error(e.getMessage(), e);
				_return.setResult(ResultType.KO);
				_return.setRetCode("101");
				_return.setErrorDesc(e.getMessage());
			} finally {
				try {
					if (cnMemDb != null) {
						ContexDbConnector.releaseConnection(cnMemDb);
					}
				} catch (Exception e) {
					SkyLogger.getMediatrixLogger().error("Failed to releaseConnection", e);
				}
			}

			_return.setCustomerId(req.getCustomerId());
			SkyLogger.getMediatrixLogger().debug(NewDBConnectorImpl.outputResponse(_return));
			SkyLogger.getMediatrixLogger().info("Finished Execution of getDynamicCustomerData: " + req.getCustomerId() + " took " + (System.currentTimeMillis() - startTime));

			return _return;
		} catch (Exception ex) {
			SkyLogger.getMediatrixLogger().error("Exception occured", ex);
			throw new RuntimeException(ex);
		}
	}
}
