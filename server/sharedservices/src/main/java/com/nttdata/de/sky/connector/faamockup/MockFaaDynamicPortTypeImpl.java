/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.nttdata.de.sky.connector.faamockup;

import com.nttdata.de.ityx.sharedservices.utils.ContexDbConnector;
import com.nttdata.de.lib.logging.SkyLogger;
import customer.de.sky.faa.schemas.*;
import services.efbus.customerservicefaa.MsgFault;
import services.efbus.customerservicefaa.PortType;

import java.io.*;
import java.math.BigInteger;
import java.sql.*;
import java.util.logging.Logger;

/**
 * This class was generated by Apache CXF 2.5.1 2013-11-25T16:48:53.739+01:00 Generated source version: 2.5.1
 */

@javax.jws.WebService(serviceName = "CustomerServiceFAA",
		portName = "CustomerServiceFAA",
		targetNamespace = "http://efbus.services/CustomerServiceFAA",
		wsdlLocation = "CustomerServiceFAA_v4.0.wsdl",
		endpointInterface = "services.efbus.customerservicefaa.PortType")
public class MockFaaDynamicPortTypeImpl implements PortType {

	private static final Logger LOG = Logger.getLogger(MockFaaDynamicPortTypeImpl.class.getName());

	//private Connection cnMemDb = null;

	public MockFaaDynamicPortTypeImpl() {
		setupTestDatabase(null, null);
	}

	public MockFaaDynamicPortTypeImpl(String setupScript, String dataScript) {
		setupTestDatabase(setupScript, dataScript);
	}

	public MockFaaDynamicPortTypeImpl(Boolean init) {
		if (init) {
			setupTestDatabase(null, null);
		} else {
			SkyLogger.getMediatrixLogger().error("Start mckup with hsql-db disabled");
			throw new IllegalArgumentException("Start mckup with hsql-db disabled");
			/*Connection cnMemDb=null;
			try {
				cnMemDb = DriverManager.getConnection("jdbc:hsqldb:mem:.", "SA", "");
			} catch (SQLException e1) {
				SkyLogger.getMediatrixLogger().error("Unable to establish memory database.", e1);
				return;
			}finally {
				try {
					ContexDbConnector.releaseConnection(cnMemDb);
				} catch (Exception e) {
					SkyLogger.getMediatrixLogger().error("Failed to releaseConnection", e);
				}
			}
			checkDBSetup();
			*/
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see services.efbus.customerservicefaa.PortType#getCustomerData(customer.de.sky.faa.schemas.CustomerDataRequestType customerDataRequest )*
	 */
	public CustomerDataResponseType getCustomerData(CustomerDataRequestType req) throws MsgFault {
		CustomerDataResponseType _return = null;
		FaultType fault = null;
		Connection cnMemDb=null;
		long startTime = System.currentTimeMillis();
		try {
			cnMemDb = ContexDbConnector.getConnection();
			PreparedStatement pst = cnMemDb.prepareStatement("select sum(contact_interval_3d) contact_interval_3d,"
					+" sum(contact_interval_7d) contact_interval_7d,"
					+" sum(contact_interval_14d) contact_interval_14d,"
					+" sum(contact_interval_21d) contact_interval_21d,"
					+"sum(contact_interval_28d) contact_interval_28d"
					+" from (select customerid ,"
					+" case when INCOMINGDATE > sysdate -3 then 1 else 0 end contact_interval_3d,"
					+" case when INCOMINGDATE > sysdate -7 then 1 else 0 end contact_interval_7d,"
					+" case when INCOMINGDATE > sysdate -14 then 1 else 0 end contact_interval_14d,"
					+" case when INCOMINGDATE > sysdate -21 then 1 else 0 end contact_interval_21d,"
					+" case when INCOMINGDATE > sysdate -28 then 1 else 0 end contact_interval_28d"
					+" from NTT_CX_REPORT"
					+" where CURRENTDOCPOOL between 600 and 610"
					+" and step='END'"
					+" and created>sysdate-28"
					+" and CUSTOMERID > 0"
					+"	and customerid=?)");
			pst.setString(1, req.getCustomerNumber());
			ResultSet rs = pst.executeQuery();

			// Statement st = cnMemDb.createStatement();
			// ResultSet rs = st.executeQuery("SELECT CONTACT_INTERVAL_3D,CONTACT_INTERVAL_7D,CONTACT_INTERVAL_14D,CONTACT_INTERVAL_21D,CONTACT_INTERVAL_28D FROM NEWDB_ASSET WHERE CUSTOMER_ID='" + req.getCustomerNumber() + "' AND SERIAL_NUMBER='" + req.getSMCNumber() + "'");
			 /*ResultSet rs = st.executeQuery("select sum(contact_interval_3d) contact_interval_3d,"
					+" sum(contact_interval_7d) contact_interval_7d,"
					+" sum(contact_interval_14d) contact_interval_14d,"
					+" sum(contact_interval_21d) contact_interval_21d,"
					+"sum(contact_interval_28d) contact_interval_28d"
					+" from (select customerid ,"
					+" case when INCOMINGDATE > sysdate -3 then 1 else 0 end contact_interval_3d,"
					+" case when INCOMINGDATE > sysdate -7 then 1 else 0 end contact_interval_7d,"
					+" case when INCOMINGDATE > sysdate -14 then 1 else 0 end contact_interval_14d,"
					+" case when INCOMINGDATE > sysdate -21 then 1 else 0 end contact_interval_21d,"
					+" case when INCOMINGDATE > sysdate -28 then 1 else 0 end contact_interval_28d"
					+" from NTT_CX_REPORT"
					+" where CURRENTDOCPOOL between 600 and 610"
					+" and step='END'"
					+" and created>sysdate-28"
					+" and CUSTOMERID > 0"
					+"	and customerid="+req.getCustomerNumber()
					+"	)");
			*/

			if (rs.next()) {
				MultipleContactListType list = new MultipleContactListType();
				String interval3D = rs.getString("CONTACT_INTERVAL_3D");
				if (interval3D != null) {
					list.setContactInterval3D(new BigInteger(interval3D));
				}
				String interval7D = rs.getString("CONTACT_INTERVAL_7D");
				if (interval7D != null) {
					list.setContactInterval7D(new BigInteger(interval7D));
				}
				String interval14D = rs.getString("CONTACT_INTERVAL_14D");
				if (interval14D != null) {
					list.setContactInterval14D(new BigInteger(interval14D));
				}
				String interval21D = rs.getString("CONTACT_INTERVAL_21D");
				if (interval21D != null) {
					list.setContactInterval21D(new BigInteger(interval21D));
				}
				String interval28D = rs.getString("CONTACT_INTERVAL_28D");
				if (interval28D != null) {
					list.setContactInterval28D(new BigInteger(interval28D));
				}

				_return = new CustomerDataResponseType();
				_return.setMultipleContactList(list);
				_return.setRateCardFlag(FlagType.N);
				_return.setRetCode("0");
				_return.setErrorDesc("Success");
			} else {
				fault = new FaultType();
				fault.setErrorCode("80");
				fault.setErrorDesc("Customer/SMC not found in FAA");
			}
			rs.close();
		} catch (SQLException e) {
			SkyLogger.getMediatrixLogger().error(e.getMessage(), e);
			fault = new FaultType();
			fault.setErrorCode("99");
			fault.setErrorDesc("Unhandled Error:"+e.getMessage());
		} finally {
			try {
				ContexDbConnector.releaseConnection(cnMemDb);
			} catch (Exception e) {
				SkyLogger.getMediatrixLogger().error("Failed to releaseConnection:"+e.getMessage(), e);
			}
		}
		if (_return == null) {
			if (fault != null) {
				throw new MsgFault(fault.getErrorCode() + ", " + fault.getErrorDesc(), fault);
			} else {
				throw new MsgFault("EMPTY Return", fault);
			}
		}
		SkyLogger.getMediatrixLogger().info("Finished Execution of getCustomerData: " + req.getCustomerNumber() + " took " + (System.currentTimeMillis() - startTime));

		return _return;
	}

	@Override
	public CustomerDiagnosticDataResponseType getCustomerDiagnosticData(CustomerDiagnosticDataRequestType customerDiagnosticDataRequest) throws MsgFault {
		return new CustomerDiagnosticDataResponseType();
	}

/*	public void cleanupDatabase(final String pCleanupScript) {
		SkyLogger.getMediatrixLogger().info("Cleanup database - dropping tables.");
		if (pCleanupScript != null) {
			File cleanupScriptFile = new File(pCleanupScript);
			if (cleanupScriptFile.exists()) {
				try {
					SkyLogger.getMediatrixLogger().debug("Using file: " + cleanupScriptFile.getAbsolutePath());
					executeSQLScript(new FileInputStream(cleanupScriptFile));
				} catch (FileNotFoundException e) {
					SkyLogger.getMediatrixLogger().debug("File " + cleanupScriptFile.getAbsolutePath() + " not found. Using packaged structure.", e);
					executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_drop.sql"));
				}
			}
		} else {
			executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_drop.sql"));
		}
	}
*/
	/*
	 * Add data from stream
	 */
	private void executeSQLScript(InputStream inputStream) {
		BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
		Connection cnMemDb=null;
		String line = "";
		StringBuilder sb = new StringBuilder();
		try {
			cnMemDb = ContexDbConnector.getConnection();
			Statement st = cnMemDb.createStatement();
			line = in.readLine();
			while (line != null) {
				line = line.trim();
				// Remarks are to discard!:
				if (!line.startsWith("REMARK")) {
					// Empty lines are ignored too:
					if (line.length() != 0) {
						sb.append(line);
					}
					// execute SQL commands one by one, so that SQL-script doesn't grow too big!:
					if (line.endsWith(";")) {
						try {
							st.execute(sb.toString());
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							SkyLogger.getConnectorLogger().info("SQL being executed: " + sb.toString());
							e.printStackTrace();
						}
						// Create sb for next SQL command:
						sb = new StringBuilder();
					}
				}
				line = in.readLine();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// print erroneous SQL command to the console for easier debugging:
			SkyLogger.getConnectorLogger().error("SQL being executed: " + sb.toString() +" e:"+e.getMessage(),e);
		}finally {
			try {
				ContexDbConnector.releaseConnection(cnMemDb);
			} catch (Exception e) {
				SkyLogger.getMediatrixLogger().error("Failed to releaseConnection:"+e.getMessage(), e);
			}
		}

	}

	private void setupTestDatabase(String setupScript, String dataScript) {

		Connection cnMemDb=null;
		try {
			// cnMemDb = DriverManager.getConnection("jdbc:hsqldb:mem:.", "SA", "");
			cnMemDb = ContexDbConnector.getConnection();
		} catch (SQLException e1) {
			SkyLogger.getMediatrixLogger().error("Unable to establish memory database.", e1);
			return;
		}finally {
			try {
				ContexDbConnector.releaseConnection(cnMemDb);
			} catch (Exception e) {
				SkyLogger.getMediatrixLogger().error("Failed to releaseConnection:"+e.getMessage(), e);
			}
		}
/*
		SkyLogger.getMediatrixLogger().info("Setup database - creating tables.");
		if (setupScript != null) {
			File setupScriptFile = new File(setupScript);
			if (setupScriptFile.exists()) {
				try {
					SkyLogger.getMediatrixLogger().debug("Using file: " + setupScriptFile.getAbsolutePath());
					executeSQLScript(new FileInputStream(setupScriptFile));
				} catch (FileNotFoundException e) {
					SkyLogger.getMediatrixLogger().debug("File " + setupScriptFile.getAbsolutePath() + " not found. Using packaged structure.", e);
					executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata.sql"));
				}
			}
		} else {
			executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata.sql"));
		}

		if (dataScript != null) {
			File file = new File(dataScript);
			if (file.exists()) {
				try {
					SkyLogger.getMediatrixLogger().debug("Using file: " + file.getAbsolutePath());
					executeSQLScript(new FileInputStream(file));
				} catch (FileNotFoundException e) {
					SkyLogger.getMediatrixLogger().warn("File " + file.getAbsolutePath() + " not found. Using packaged data.", e);
					executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_data.sql"));
				}
			}
		} else {
			executeSQLScript(ClassLoader.getSystemResourceAsStream("src/test/ressources/dynamiccustomerdata_data.sql"));
		}
*/
		checkDBSetup();

	}

	/**
	 *
	 */
	public void checkDBSetup() {
		Statement st;
		Connection cnMemDb=null;
		try {
			cnMemDb = ContexDbConnector.getConnection();
			st = cnMemDb.createStatement();
			ResultSet rs = st.executeQuery("SELECT CUSTOMER_ID FROM NEWDB_CUSTOMER");

			int customers = 0;
			while (rs.next()) {
				customers++;
			}
			SkyLogger.getMediatrixLogger().debug("MEMDB imported " + customers + " customers");
		} catch (SQLException e) {
			SkyLogger.getMediatrixLogger().error("Failed to query for customers.", e);
		}finally {
			try {
				ContexDbConnector.releaseConnection(cnMemDb);
			} catch (Exception e) {
				SkyLogger.getMediatrixLogger().error("Failed to releaseConnection:"+e.getMessage(), e);
			}
		}
	}


}
