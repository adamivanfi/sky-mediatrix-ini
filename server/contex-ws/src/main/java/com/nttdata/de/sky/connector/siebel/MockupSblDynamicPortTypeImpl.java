/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.nttdata.de.sky.connector.siebel;

import com.nttdata.de.lib.logging.SkyLogger;
import com.nttdata.de.sky.connector.contex.TestContexServiceProvider;
import com.nttdata.de.sky.ityx.common.FlowObjectConstants;
import de.ityx.contex.webservice.schema.ContexRequest;
import de.ityx.contex.webservice.schema.ContexResponse;
import de.ityx.contex.webservice.schema.Entry;
import de.ityx.contex.webservice.service.ContexErrorMessage;
import de.ityx.contex.webservice.service.ContexWs;
import de.ityx.contex.webservice.service.ContexWsService;
import de.sky.integration.web.siebelservice._1.*;

import javax.jws.WebParam;
import javax.xml.namespace.QName;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

//import ContexServiceProvider;

/**
 * This class was generated by Apache CXF 2.4.3 2011-11-17T08:36:25.997+01:00
 * Generated source version: 2.4.3
 */

@javax.jws.WebService(serviceName = "SiebelService", portName = "SiebelServiceEndpoint", targetNamespace = "http://www.sky.de/integration/web/SiebelService/1.0", wsdlLocation = "wsdl/IF4_Siebel/SiebelService.wsdl", endpointInterface = "de.sky.integration.web.siebelservice._1.PortType")
public class MockupSblDynamicPortTypeImpl implements PortType {

	public static final String FaultLevelException = "ERROR_exception";
	public static final String FaultLevelInvocationError = "ERROR_invocationError";
	public static final String FaultLevelAsynchronousError = "ERROR_asyncError";
	private String contexUrl;
	private TestContexServiceProvider contexProvider;

	public MockupSblDynamicPortTypeImpl(String aContexUrl) {

		contexUrl = aContexUrl;

		/*
		 * If there is no callback directory, the service below will be invoked
		 * As this is a test class only it is not necessary to make this stub
		 * implementation replaceable.
		 */
		if (contexUrl == null) {
			SkyLogger.getConnectorLogger().debug("There is no contex service provided. Instantiate a test instance.");
			contexProvider = new TestContexServiceProvider();
			contexProvider.start();
			contexUrl = TestContexServiceProvider.address + "?WSDL";
		}
	}

	public void shutdown() {
		if (contexProvider != null)
			contexProvider.shutdown();
	}

	public CreateTrackingSRResponseType createTrackingSR(CreateTrackingSRRequestType createTrackingSRRequest) throws MsgFault {
		SkyLogger.getConnectorLogger().debug("Executing operation createTrackingSR: " + createTrackingSRRequest.getDocumentId());
		SkyLogger.getConnectorLogger().debug(createTrackingSRRequest);
		try {
			CreateTrackingSRResponseType _return = new CreateTrackingSRResponseType();

			if (FaultLevelException.equals(createTrackingSRRequest.getContractId())) {
				throw new MsgFault("Simulated Exception", new FaultType());
			} else if (FaultLevelAsynchronousError.equals(createTrackingSRRequest.getContractId())) {
				new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_CreateTrackingSR, createTrackingSRRequest.getDocumentId(), "9-M", MockupSblDynamicPortTypeImpl.FaultLevelAsynchronousError).start();
				_return.setStatus(StatusType.OK);
				return _return;
			} else {
				new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_CreateTrackingSR, createTrackingSRRequest.getDocumentId(), "9-M-" + getPaddedHexString((long) Math.random()*10000,5)).start();
				_return.setStatus(StatusType.OK);
				return _return;
			}

		} catch (java.lang.Exception ex) {
			FaultType f=new FaultType();
			f.setErrorDesc("Problem during createTrackingSR:"+createTrackingSRRequest.getDocumentId()+":"+createTrackingSRRequest.getCustomerId()+":"+createTrackingSRRequest.getCorrelationId()+":"+createTrackingSRRequest.getContractId()+":e:"+ ex.getMessage());
			SkyLogger.getConnectorLogger().error(f.getErrorDesc(),ex);
			throw new MsgFault("Exception:"+ex.getMessage(), f);
		}
		// throw new MsgFault("MsgFault...");
	}

	@Override
	public TriggerSRQuickActionResponseType triggerSRQuickAction(@WebParam(name = "triggerSRQuickActionRequest", targetNamespace = "http://www.sky.de/integration/web/SiebelService/1.0", partName = "triggerSRQuickActionRequest") TriggerSRQuickActionRequestType triggerSRQuickActionRequest) throws MsgFault {
		SkyLogger.getConnectorLogger().debug("Executing operation triggerSRQuickAction: " + triggerSRQuickActionRequest.getCorrelationId());

		TriggerSRQuickActionResponseType response=new TriggerSRQuickActionResponseType();
		if (FaultLevelException.equals(triggerSRQuickActionRequest.getContractId())) {
			throw new MsgFault("Simulated Exception", new FaultType());
		} else if (FaultLevelAsynchronousError.equals(triggerSRQuickActionRequest.getContractId())) {
			new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_CreateTrackingSR, triggerSRQuickActionRequest.getCorrelationId(), "8-M", MockupSblDynamicPortTypeImpl.FaultLevelAsynchronousError).start();
			response.setStatus(StatusType.OK);
		} else {
			new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_CreateTrackingSR, triggerSRQuickActionRequest.getCorrelationId(), "8-M-" + getPaddedHexString((long) Math.random()*10000,5)).start();
			response.setStatus(StatusType.OK);
		}
		SkyLogger.getConnectorLogger().debug("Executing operation triggerSRQuickAction: " + triggerSRQuickActionRequest.getCorrelationId());
		return response;
	}

	public AdjustSRResponseType adjustSR(AdjustSRRequestType adjustSRRequest) throws MsgFault {
		SkyLogger.getConnectorLogger().debug("Executing operation adjustSR");
		SkyLogger.getConnectorLogger().debug(adjustSRRequest);
		try {
			AdjustSRResponseType _return = new AdjustSRResponseType();

			String contactId = adjustSRRequest.getContactId();
			//_return.setContactIdNew(adjustSRRequest.getCustomerIdNew().equals("0") ? "0" : contactId.equalsIgnoreCase("0") ? adjustSRRequest.getChannel().toString() : contactId);
			_return.setContactIdNew("7-M-"+getPaddedHexString((long) Math.random()*10000,5));
			_return.setDocumentId(adjustSRRequest.getDocumentId());

			if (FaultLevelException.equals(adjustSRRequest.getDocumentId())) {
				throw new MsgFault("Simulated Exception", new FaultType());
			}

			_return.setStatus(StatusType.OK);

			return _return;
		} catch (java.lang.Exception ex) {
			FaultType f=new FaultType();
			f.setErrorDesc("Problem during adjust of SR:"+adjustSRRequest.getDocumentId()+":"+adjustSRRequest.getCustomerIdNew()+":"+adjustSRRequest.getContractIdNew()+": e:"+ex.getMessage());
			SkyLogger.getConnectorLogger().error(f.getErrorDesc(),ex);
			throw new MsgFault("Exception:"+ex.getMessage(), f);
		}
		// throw new MsgFault("MsgFault...");
	}

	public static String getPaddedHexString(Long id, Integer length) {
		String hexString = Long.toHexString(id);
		while (hexString.length() < length) {
			hexString = "0" + hexString;
		}
		return hexString;
	}

	public AssociateDocumentIdResponseType associateDocumentId(AssociateDocumentIdRequestType associateDocumentIdRequest) throws MsgFault {
		SkyLogger.getConnectorLogger().debug("Executing operation associateDocumentId");
		SkyLogger.getConnectorLogger().debug(associateDocumentIdRequest);
		try {
			AssociateDocumentIdResponseType _return = new AssociateDocumentIdResponseType();

			if (FaultLevelException.equals(associateDocumentIdRequest.getDocumentId())) {
				throw new MsgFault("Simulated Exception", new FaultType());
			} else if (FaultLevelInvocationError.equals(associateDocumentIdRequest.getDocumentId())) {
				new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_AssociateActivity, associateDocumentIdRequest.getDocumentId(), "6-M", "Simulated Error");
			} else {
				new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_AssociateActivity, associateDocumentIdRequest.getDocumentId(), "6-M-" + getPaddedHexString((long) Math.random()*10000,5));
			}

			_return.setStatus(StatusType.OK);

			return _return;
		} catch (java.lang.Exception ex) {
			FaultType f=new FaultType();
			f.setErrorDesc("Problem during associateDocumentId :"+associateDocumentIdRequest.getDocumentId()+":"+associateDocumentIdRequest.getCorrelationId()+":"+associateDocumentIdRequest.getActivityId()+":"+associateDocumentIdRequest.getUseCaseId()+": e:"+ex.getMessage());
			SkyLogger.getConnectorLogger().error(f.getErrorDesc(),ex);
			throw new MsgFault("Exception:"+ex.getMessage(), f);
		}
		// throw new MsgFault("MsgFault...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.sky.integration.web.siebelservice._1_0.PortType#createContact(de.sky
	 * .integration.web.siebelservice._1.CreateContactRequestType
	 * createContactRequest )*
	 */
	public CreateContactResponseType createContact(CreateContactRequestType createContactRequest) throws MsgFault {
		SkyLogger.getConnectorLogger().debug("Executing operation createContact: " + createContactRequest.getDocumentId());
		SkyLogger.getConnectorLogger().debug(createContactRequest);
		try {
			CreateContactResponseType _return = new CreateContactResponseType();

			/*
			 * This simulates the logic of Siebel A simple contact id is created
			 * based on the document id provided in the request
			 */

			/*
			 * The actual implementation will be provided by Tibco. This is only
			 * a stub for local testing.
			 * 
			 * When no callback folder is used, the stub for the contex
			 * interface is being called
			 * 
			 * In a dedicated callback directory a callback file will be
			 * created. The directory is platform dependent and can be
			 * configured using the constructor.
			 */

			SkyLogger.getConnectorLogger().debug("Creating callback via web service");

			if (FaultLevelException.equals(createContactRequest.getDocumentType())) {
				throw new MsgFault("Simulated Exception", new FaultType());
			} else if (FaultLevelAsynchronousError.equals(createContactRequest.getDocumentType())) {
				SkyLogger.getConnectorLogger().info("Creating error response");
				new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_CreateContact, createContactRequest.getDocumentId(), "5-M", FaultLevelAsynchronousError).start();
			} else {
				new ResponseThread(contexUrl, FlowObjectConstants.SiebelCallback.VALUE_CreateContact, createContactRequest.getDocumentId(), "5-M-" + getPaddedHexString((long) Math.random()*10000,5)).start();
			}

			/*
			 * As this is a simulation of the siebel service it is assumed that
			 * when using a callback the simulated service is used as well.
			 */

			_return.setStatus(StatusType.OK);
			return _return;
		} catch (java.lang.Exception ex) {
			FaultType f=new FaultType();
			f.setErrorDesc("Problem during createContact :"+createContactRequest.getDocumentId()+":"+createContactRequest.getCorrelationId()+":"+createContactRequest.getCustomerId()+":"+createContactRequest.getUseCaseId()+": e:"+ex.getMessage());
			SkyLogger.getConnectorLogger().error(f.getErrorDesc(),ex);
			throw new MsgFault("Exception:"+ex.getMessage(), f);
		}
	}

	public class ResponseThread extends Thread {

		private String docId;
		private String contactId;
		private String serviceUrl;
		private String usecase;
		private String errorCode = "0";
		private String errorMessage = "";

		public ResponseThread(String serviceUrl, String usecase, String docId, String contactId) {
			this.usecase = usecase;
			this.docId = docId;
			this.serviceUrl = serviceUrl;

			this.contactId = contactId;
		}

		public ResponseThread(String serviceUrl, String usecase, String docId, String errorCode, String errorMessage) {
			this.usecase = usecase;
			this.docId = docId;
			this.serviceUrl = serviceUrl;

			this.contactId = "";
			this.errorCode = errorCode;
			this.errorMessage = errorMessage;
		}

		public void run() {
			try {
				URL url = new URL(serviceUrl);
				SkyLogger.getConnectorLogger().debug("Calling " + url.toString() + " for document " + docId + " and contact id " + contactId);

				int delay = 200;
				String delayS = System.getProperty("SiebelServiceProvider.delay");
				if (delayS != null) {
					try {
						delay = Integer.parseInt(System.getProperty("SiebelServiceProvider.delay"));
					} catch (Exception ex) {
						SkyLogger.getConnectorLogger().warn("Unable to interpret system property SiebelServiceProvider.delay: " + delayS + " - defaulting to " + delay);
					}
				}

				SkyLogger.getConnectorLogger().debug("Delaying for " + delay);
				Thread.sleep(delay);

				ContexWsService service = new ContexWsService(url, new QName("http://webservice.contex.ityx.de/service", "ContexWsService"));
				ContexWs port = service.getPort(ContexWs.class);

				ContexRequest payload = new ContexRequest();
				payload.setMaster("sky"); // Mastername
				payload.setProcessName("03_inbound_callback"); // Prozessname

				SkyLogger.getConnectorLogger().debug("INPUT for Contex:");

				// Es können beliebig viele Entries übergeben werden
				Entry e = new Entry();
				e.setKey("documentid"); // entspricht dem Inputparameter im
				// Prozess
				e.setValue(docId);
				payload.getEntries().add(e);
				SkyLogger.getConnectorLogger().debug(e.getKey() + " : " + e.getValue());

				e = new Entry();
				e.setKey("usecaseid");
				e.setValue(usecase);
				payload.getEntries().add(e);
				SkyLogger.getConnectorLogger().debug(e.getKey() + " : " + e.getValue());

				e = new Entry();
				e.setKey("correlationid");
				e.setValue(docId);
				payload.getEntries().add(e);
				SkyLogger.getConnectorLogger().debug(e.getKey() + " : " + e.getValue());

				e = new Entry();
				e.setKey("errorcode");
				e.setValue(errorCode);
				payload.getEntries().add(e);
				SkyLogger.getConnectorLogger().debug(e.getKey() + " : " + e.getValue());

				e = new Entry();
				e.setKey("errormessage");
				e.setValue(errorMessage);
				payload.getEntries().add(e);
				SkyLogger.getConnectorLogger().debug(e.getKey() + " : " + e.getValue());

				e = new Entry();
				e.setKey("contactid");
				e.setValue(contactId);
				payload.getEntries().add(e);
				SkyLogger.getConnectorLogger().debug(e.getKey() + " : " + e.getValue());

				ContexResponse runProcess = port.runProcess(payload);

				SkyLogger.getConnectorLogger().debug("Result from Contex:");
				// ContexResponse enthält eine Liste mit den Outputparametern
				List<Entry> list = runProcess.getReturn();
				for (Entry entry : list) {
					SkyLogger.getConnectorLogger().debug(entry.getKey() + " : " + entry.getValue());
				}
			} catch (InterruptedException | MalformedURLException | ContexErrorMessage e) {
				// TODO Auto-generated catch block
				e.printStackTrace();

			}
		}
	}

}
